{
  "name": "hapi-meal",
  "description": "A simple MVC framework for HAPI",
  "maintainers": [
    {
      "name": "Geoffroy Pierret",
      "url": "https://github.com/gpierret"
    }
  ],
  "contributors": [
    {
      "name": "Geoffroy Pierret",
      "url": "https://github.com/gpierret"
    }
  ],
  "version": "0.0.5-beta",
  "repository": {
    "type": "git",
    "url": "http://github.com/gpierret/hapi-meal.git"
  },
  "bugs": {
    "url": "http://github.com/gpierret/hapi-meal/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/gpierret/hapi-meal/raw/master/LICENSE"
    }
  ],
  "engines": {
    "node": "0.10.x"
  },
  "dependencies": {
    "lodash": "*",
    "hapi": "*",
    "joi": "*",
    "less": "*",
    "crypto": "*"
  },
  "main": "index.js",
  "readmeFilename": "README.md",
  "readme": "Hapi-Meal\n=================\n\nA simple MVC framework for HAPI `version 0.0.5-alpha`\n\n## Installation\n```bash\nnpm install hapi-meal\n```\n\n## Use\n### Tree structure\n```\n|_ config // Your settings here\n|\n|_ controllers\n|  |_ index.js // Index controller\n|  |_ lolcat.js // Some other\n|\n|_ models\n|  |_ lolcat.js // Your models\n|\n|_ nodes_modules\n|\n|_public // Your static stuff\n|  |_ css\n|  |_ js\n|\n|_views // Your templates\n|  |_ index\n|  |  |_ index.html // Action subtemplates\n|  |\n|  |_ lolcat\n|  |  |_ view.html\n|  |\n|  |_ layout.html // The main layout template\n|\n|_server.js\n```\n\n### The _server.js_ file\n```js\nvar HapiMeal = require('hapi-meal');\nvar path = require('path');\nvar settings =  {\n app: {\n   name: 'MyApp',\n   host: 'localhost',\n   port: 33000,\n   path: __dirname + '/'\n }\n};\n\nvar myApp = HapiMeal.createApplication(\n  settings,\n function () {\n   myApp.start();\n   console.log(\n     'Meal cooked and served at ' +\n       settings.app.host + ':' + settings.app.port\n   );\n }\n);\n// myApp server is now listening at http://localhost:33000/\n```\n\n### The settings object\nThe settings object given to `HapiMeal.createApplication` is the same as the one you would use with `Hapi.createServer` (see https://github.com/spumko/hapi/blob/master/docs/Reference.md#server-options).\nHapiMeal custom settings are available in the `app` section of this object :\n```js\nvar path = require('path');\n\nmodule.exports = {\n // START of Hapi-Meal specific settings\n\n // Application specific settings\n  app: {\n\n    // Application name\n    name: 'Surimmo',\n\n    // Server host\n    host: 'localhost',\n\n    // Server port\n    port: 3001,\n\n    // Application base directory\n    // Here we assume to be in a config file under a \"settings\" app subfolder\n    path: __dirname + '/../',\n\n    // OPTIONAL : preExecute method : See below\n    preExecute: function (request, data, controller, action) { ... },\n\n    // OPTIONAL : Menu section : See below\n    menu: { ... },\n\n    // OPTIONAL :Assets cooking settings : See below\n    assets: { ... },\n\n    // NOTE :\n\n    // You may want to separate your section in different files\n    // Your files must use module.exports = {}\n    // Just write :\n    routes: require('./routes')\n  },\n\n  // END of HapiMeal specific settings\n  // START of Hapi classical settings\n\n  // Authentication settings section\n  // https://github.com/spumko/hapi/blob/master/docs/Reference.md#serverauthname-options\n  auth: {\n    default: {\n      scheme: 'cookie',\n      cookie: 'sid',\n      password: 'secret',\n      isSecure: false,\n      redirectTo: '/login'\n    }\n  },\n\n  // Template settings section\n  views: {\n   engines: {\n     html: 'handlebars',\n     jade: 'jade'\n   },\n   path: __dirname + '/../views',\n   layoutKeyword: 'body'\n },\n};\n```\n\n### Assets section : LESS files cooking\nHere is an example of `settings.app.assets` :\n```js\napp {\n  assets: {\n    less: {\n      path: [ 'main.less' ], // Just one main file, importing others\n      dir: __dirname + '/../less' // LESS files directory\n    }\n  }\n}\n```\n\nTo import the compiled `main.less` in your templates, just write :\n```html\n<link rel='stylesheet' href='<%= app.resources.css.get('main.less') %>' type='text/css'>\n```\nCheck the example `views/layout.html` template to see it in action.\n\n\n### Menu section :\nThis section will generate a \"menu\" template key, with your object rendered to an HTML menu <ul>. This is useful when you want to have `<li class='active'>` on current page links.\n\nHere is an example of `settings.app.menu` :\n```js\napp {\n  menu: {\n    main: {\n      ul: 'menuCssClass',\n        li: {\n          active: 'activeCssClass',\n          separator: 'separatorCssClass',\n          separatorEl: false, // If the separator is a separate <li> element\n          hasChildren: 'parentCssClass'\n      },\n      a: { hasChildren: 'parentLinkCssClass' }\n    },\n    // OPTIONAL : Submenu/Children settings\n    // Overrides main menu settings on sub-elements\n    // (for menu links with sublinks)\n    children: {\n      ul: 'submenuListCssClass',\n        li: {\n          active: 'activeSubClass',\n          separator: 'separatorSubClass',\n          separatorEl: false,\n          hasChildren: 'parentSubCssClass'\n      },\n      a: { hasChildren: 'parentSublinkCssClass' }\n    },\n    links: [\n      { href: '/', text: \"<i>Home</i>\", title: 'Back to home' },\n      { href: '/foo', text: 'Foo', title: 'Visit this insane section' },\n      { href: '/bar', text: 'Bar', title: 'Free beer!' },\n      {\n        href: '/blog',\n        auth: true,\n        class: ['pull-right'],\n        text: 'Blog',\n        title: 'Read our blog',\n        // Sublinks of blog (will create a submenu)\n        links: [\n          { href: '/archive', text: 'See the archive', title: '', separator: true },\n          { href: '/category/pony', text: 'Pony section', title: '' },\n          { href: '/category/unicorn', text: 'Unicorn section', title: '' }\n        ]\n      }\n    ]\n  }\n}\n```\n\nTo import the rendered menu in your templates, just write `<%= menu %>`, or `{{menu}}` depending on your template engine.\n\n### preExecute option : Pseudo front controller\nThis optionnal function can be used to block request dispatching on custom conditions.\n```js\napp {\n  preExecute: function (request, data, controller, action) {\n    var keepOn = true;\n    // Foo condition on when redirecting users\n    if (controller == 'foo' && data.stopDispatchingRequest) {\n        request.auth.session.clear();\n        request.reply.redirect('/');\n        keepOn = false;\n      }\n    }\n    return keepOn;\n  }\n}\n```",
  "homepage": "https://github.com/gpierret/hapi-meal",
  "_id": "hapi-meal@0.0.5-beta",
  "dist": {
    "shasum": "c63cb1fdfd9d37d8f76e85516858ece413177b31"
  },
  "_from": "hapi-meal@",
  "_resolved": "https://registry.npmjs.org/hapi-meal/-/hapi-meal-0.0.5-beta.tgz"
}
