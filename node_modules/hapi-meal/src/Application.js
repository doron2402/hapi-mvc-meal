var _ = require('lodash')
  , Hapi = require('hapi')
  , Loader = require('./Loader')
  , Cooker = require('./Cooker')
  , Menu = require('./Renderer/Menu')
  , fs = require('fs');

/**
 * Application
 * @type {Function}
 */
var Application = module.exports = function Application (settings, readyCallback) {
  this.settings = settings;
  this.routes = [];
  this.createServer()
      .load(readyCallback);
  return this;
};

_.extend(
  Application.prototype,
  {
    /**
     * Creates the HapiServer
     * @return {*}
     */
    createServer: function () {
      this.server = new Hapi.Server(
        this.settings.app.host,
        parseInt(this.settings.app.port),
        this.settings || {}
      );
      if (typeof this.settings.app.start === 'function') {
        this.settings.app.start.call(this);
      }
      return this;
    },

    /**
     * Register app routes
     * and start the HapiServer
     * @return {*}
     */
    start: function (callback) {
      // Core routes (cooker)
      // & routes from controllers
      if (this.routes.length) {
        this.server.addRoutes(this.routes);
      }
      // Config routes
      this.settings.app.routes = this.settings.app.routes(this);
      if (_.isObject(this.settings.app.routes)
      && !_.isEmpty(this.settings.app.routes)) {
        this.server.addRoutes(
          this.settings.app.routes
        );
      }
      var self = this;
      if (this.settings.app.errorTemplate) {
        this.server.ext('onPreResponse', function (request, next) {
          var response = request.response();
          if (response.isBoom && self.settings.app.errorTemplate
          && (!request.route.plugins.hasOwnProperty('friendlyErrors') || request.route.plugins.friendlyErrors === true)) {
            // Replace error with friendly HTML
            next(
              request.generateView(
                self.settings.app.errorTemplate,
                self.prepareData(
                  'error', 'main', request,
                  { error: response.response, title: 'An error has occured', i18n: request.i18n }
                )
              )
            );
          } else {
            return next();
          }
        });
      }
      if (typeof this.settings.app.init === 'function') {
        this.settings.app.init.call(this);
      }
      this.server.start(callback);
      return this;
    },

    prepareData: function (controllerName, actionName, request, extra) {
      var data = {
        controllerName: controllerName,
        actionName: actionName,
        viewName: controllerName + '/' + actionName,
        app: this,
        user: (request.session && request.session._isAuthenticated()) ?
          request.session.user : (request.auth && request.auth.isAuthenticated) ?
          request.auth.credentials :null,
        path: request.path,
        bodySlug: controllerName +
          actionName.charAt(0).toUpperCase() +
          actionName.substr(1)

      };
      if (extra) {_.extend(data, extra); }
      if (typeof this.settings.app.prepareTemplateData === 'function') {
        data = this.settings.app.prepareTemplateData.call(this, data);
      }
      if (this.settings.app.menu) {
        if (!this.menu) {
          this.menu = new Menu(
            this.settings.app.menu,
            this.server._views._engines
          );
        }
        data.menu = this.menu.render(request.path, data.user, request.i18n);
      }
      return data;
    },

    /**
     * Trigger controller action execution
     * @param controllerName Triggered controller name
     * @param actionName Triggered action name
     * @param param [optionnal] Additional route param
     * @param request Hapi Request object
     * @return {*}
     */
    execute: function () {
      controllerName = arguments[0];
      actionName = arguments[1];
      var routeParam;
      if (arguments.length > 4) {
        routeParam = arguments[2];
        request = arguments[3];
      } else {
        request = arguments[2];
      }
      var controller = this.controllers[controllerName];
      var data = this.prepareData(controllerName, actionName, request);
      controller[actionName + 'Action'].call(controller, request, data, routeParam);
    },

    /**
     * Walk directories to find
     * app controllers & models
     * @param readyCallback
     * @return {*}
     */
    load: function(readyCallback) {
      if (typeof readyCallback !== 'function') {
        readyCallback = function() {}; // we're ready bro!
      }
      var self = this;
      var loader = new Loader(this);
      loader.findModels(
        function () {
          loader.findControllers(
            function () {
              loader.initialize(); // Registering found files
              if (self.settings.app.assets) {
                new Cooker(
                  self,
                  readyCallback
                ).cook(); // Cooking assets
              } else {
                readyCallback();
              }
            }
          );
        }
      );
      return this;
    }
  }
);