var _ = require('lodash');

/**
 * Menu utilities
 * @type {Object}
 */
var Menu = module.exports = function Menu(settings, engines) {
  this.settings = settings;
  this.engines = engines;
  return this;
};

_.extend(
  Menu.prototype,
  {
    /**
     * Renders the menu recursively from settings
     * @return {String} HTML Output (<ul>)
     */
    render: function (currentPath, user, i18n, links, options, childrenOptions) {
      if (!i18n) {
        i18n = {
          __ : function(str) { return str; }
        };
      }
      var isAuth = _.isObject(user);
      links = links || this.settings.links;
      options = options || this.settings.main;
      childrenOptions = childrenOptions || this.settings.children;
      var output = "<ul role='menu' class='" + options.ul + "'>";
      for (var i = 0, l = links.length; i < l; i++) {
        var checkAuth = _.has(links[i], 'auth');
        if (!checkAuth || (checkAuth && links[i].auth === isAuth)) {
          var hasChildren = _.has(links[i], 'links');
          var liClass = [];
          if (links[i].href === currentPath) {
            liClass.push(options.li.active);
          }
          if (hasChildren) {
            liClass.push(options.li.hasChildren);
          }
          if (_.has(links[i], 'separator') && links[i].separator) {
            if (options.li.separatorEl) {
              output += "<li class='" + options.li.separator + "'></li>";
            } else {
              liClass.push(options.li.separator);
            }
          }
          if (_.has(links[i], 'class')) {
            liClass = liClass.concat(links[i].class);
          }
          liClass = liClass.join(' ');
          output += '<li' + ((liClass) ? " class='" + liClass + "'" : '');
          if (_.has(links[i], 'attr')) {
            for (var attribute in links[i].attr) {
              output += ' ' + attribute +'="' + links[i].attr[attribute] + '"';
            }
          }
          output += '>';
          if (_.has(links[i], 'type')) {
            if (_.has(links[i], 'isTemplate')) {
              if (typeof links[i].value !== 'function') {
                links[i].value = this.engines[links[i].isTemplate].module.compile(links[i].value);
              }
              output += links[i].value({ user: user, i18n: i18n });
            } else {
              output += links[i].value; //links[i].type === 'html'
            }
          } else {
            output += "<a href='" + links[i].href + "'" +
              ((hasChildren) ? " class = '" + options.a.hasChildren + "'" : '');
            if (_.has(links[i], 'linkAttr')) {
              for (attribute in links[i].linkAttr) {
                output += ' ' + attribute +'="' + links[i].linkAttr[attribute] + '"';
              }
            }
            output += " title='" + i18n.__(links[i].title) + "'>" +
              i18n.__(links[i].text) + '</a>';
          }
          if (hasChildren && typeof(links[i].links) === 'object') {
            output += this.render(
              currentPath, user,
              i18n, links[i].links,
              childrenOptions || options,
              childrenOptions || options
            );
          }
          output += '</li>';
        }
      }
      return output + '</ul>';
    }
  }
);
