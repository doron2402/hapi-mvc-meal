var _ = require('lodash')
  , fs = require('fs')
  , path = require('path')
  , Hapi = require('hapi')
  , Hasher = require('./../Hasher');

/**
 * Less File Cooker
 * @type {Function}
 */
var Stylus = module.exports = function Stylus(app, doneCallback) {
  this._app = app;
  this.settings = this._app.settings.app.assets.stylus;
  this.doneCallback = doneCallback;
  return this;
};

_.extend(
  Stylus.prototype,
  {

    cook: function () {
      var self = this;
      try {
        this.parser = require('stylus');
        this.loopStylusFiles(
          function () {
            self.doneCallback();
          }
        );
      } catch (error) {
        console.log(error);
      }
    },

    loopStylusFiles: function (callback) {
      this.parser.compiled = 0;
      for (var i = 0, l = this.settings.files.length; i < l; i++) {
        var filename = this.settings.files[i];
        var filepath = path.normalize(
          this.settings.path + '/' + filename
        );
        var self = this;
        fs.readFile(
          filepath, 'utf-8',
          function(err, stylusContent) {
            try {
              self.parser.compiled++;
              if (err) {
                self.displayError(err);
              } else {
                self.parser(stylusContent)
                  .set('filename', filepath)
                  .set('paths', [self.settings.path])
                  .render(
                  function (err, css) {
                    if (err) {
                      self.displayError(err);
                    }
                    self.registerCompiledFile(
                      css, filepath,
                      filename
                    );
                  }
                );
              }
              if (self.parser.compiled === l
                && typeof callback === 'function') {
                callback();
              }
            } catch (err) {
              self.displayError(err);
            }
          }
        );
        if (self.parser.compiled === l
          && typeof callback === 'function') {
          callback();
        }
      }
    },

    /**
     * Register compiled files as app properties
     * TODO : Check redis or other kind of storage
     * @param fileContent
     * @param filePath
     * @param fileName
     */
    registerCompiledFile: function(fileContent, filePath, fileName) {
      var hash = new Hasher().sumString(
        filePath,
        fileContent
      );
      console.log('Registering STYLUS file "' + fileName + '" (hash "' + hash + '")');
      this._app.resources.css.content[hash] = fileContent;
      this._app.resources.css.path[fileName] = hash;
    },

    displayError: function(error) {
      console.log(
        "Error packing STYLUS",
        {
          message: error.message,
          line: error.line,
          file: error.filename
        }
      );
    }
  }
);
